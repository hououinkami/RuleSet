name: 更新规则

on:
  push:
    branches:
      - main
    # path:
    #   - .*
  release:
    types: [published]
  schedule:
    - cron: 0 17 * * *
  watch:
    types: [started]

env:
  TZ: Asia/Shanghai
  TELEGRAM_NOTIFICATION: false
  TELEGRAM_NOTIFICATION_CONTENT: <b>ルール更新しました！</b>
  VER: all


jobs:
  UpdateRule:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0
        lfs: true
    
    - name: Set git identity
      run : |
        git config --global user.email "hououinkami@gmail.com"
        git config --global user.name "hououinkami"
    
    - name: 获取当前日期
      id: date
      run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    
    - name: 获取最新源
      run : |
        wget https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Surge/AllInOne/AllInOne_Mock.sgmodule -O all_Rwrite.tmp
        wget https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Advertising/Advertising_MITM.sgmodule -O all_Advertising.tmp
        wget https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/script/bilibili/bilibili_plus.sgmodule -O bili.tmp
        wget https://raw.githubusercontent.com/Maasea/sgmodule/master/YoutubeAds.sgmodule -O youtube_ad.tmp
        wget https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/Adblock4limbo.sgmodule -O limbo.tmp
        wget https://raw.githubusercontent.com/app2smile/rules/master/module/spotify.module -O spotify.tmp

        wget https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Outbound.conf -O shenji.tmp
        wget https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Module/General.sgmodule -O General.tmp
        wget https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Module/Block/Advertising.sgmodule -O Advertising.tmp

    # 示例
    # awk '/^(终止行起始字段)/{f=0} f; /起始行关键字/{f=1}' all_Rwrite.tmp>tmp.tmp
    # 过滤空白行
    # awk NF tmp.tmp>rule2.tmp

    - name: 生成整合规则hostname
      run : |
        awk '
        {
          if($0~/hostname = %APPEND%/) {
            gsub("hostname = %APPEND%","");
            print $0 ",";
            {exit}; 
          }      
        }
        ' all_Advertising.tmp>tmp.tmp
        awk '{if(NR%3!=0)ORS=" ";else ORS="\n "}1' tmp.tmp > hostname1.tmp
        sed 's/^/整合, /' hostname1.tmp
    
    - name: 生成整合规则Rewrite
      run : |
        awk '
        {
          if($0~/force-http-engine-hosts = %APPEND%/) {
            gsub("force-http-engine-hosts = %APPEND% ","");
            print $0 ",";
            {exit};
          }      
        }
        ' all_Rwrite.tmp>force-http-engine-hosts1.tmp 

        awk '/^(\[)/{f=0} f; /\[Rule\]/{f=1}' all_Rwrite.tmp>tmp.tmp
        awk NF tmp.tmp>rule1.tmp
        sed '1i # > 整合' rule1.tmp

        awk '/^(\[)/{f=0} f; /\[URL Rewrite\]/{f=1}' all_Rwrite.tmp>tmp.tmp
        awk '
        {
          if($0!~/imgextra/) {
            print $0;
          }      
        }
        ' tmp.tmp>tmp2.tmp
        awk NF tmp2.tmp>url_rewrite1.tmp
        sed '1i # > 整合' url_rewrite1.tmp

        awk '/^(\[)/{f=0} f; /\[Map Local\]/{f=1}' all_Rwrite.tmp>tmp.tmp
        awk NF tmp.tmp>map_local1.tmp

        awk '/^(\[)/{f=0} f; /\[Script\]/{f=1}' all_Rwrite.tmp>tmp.tmp
        awk NF tmp.tmp>script1.tmp
        sed '1i # > 整合' script1.tmp

        awk '
        {
          if($0~/hostname = %APPEND%/) {
            gsub("hostname = %APPEND%","");
            print $0;
            {exit}; 
          }      
        }
        ' all_Rwrite.tmp>hostname2.tmp

    - name: 生成YouTube广告屏蔽规则
      run : |
        awk '/^(\[)/{f=0} f; /\[URL Rewrite\]/{f=1}' youtube_ad.tmp>tmp.tmp
        awk NF tmp.tmp>youtube_ad_url_rewrite.tmp

        awk '/^(\[)/{f=0} f; /\[Script\]/{f=1}' youtube_ad.tmp>tmp.tmp
        awk NF tmp.tmp>youtube_ad_script.tmp

        awk '/^(\[)/{f=0} f; /\[Map Local\]/{f=1}' youtube_ad.tmp>tmp.tmp
        awk NF tmp.tmp>youtube_ad_map_local.tmp

        awk '
        {
          if($0~/hostname = %APPEND%/) {
            gsub("hostname = %APPEND%","");
            print $0 ",";
            {exit}; 
          }      
        }
        ' youtube_ad.tmp>youtube_ad_hostname.tmp

    - name: 生成Adblock4limbo规则Rewrite
      run : |
        awk '/^(\[)/{f=0} f; /\[URL Rewrite\]/{f=1}' limbo.tmp>tmp.tmp
        awk '
        {
          if($0!~/m.baidu.com 302/) {
            print $0; 
          }      
        }
        ' tmp.tmp>tmp2.tmp
        awk NF tmp2.tmp>limbo_url_rewrite.tmp

        awk '/^(\[)/{f=0} f; /\[Header Rewrite\]/{f=1}' limbo.tmp>tmp.tmp
        awk NF tmp.tmp>limbo_header_rewrite.tmp

        awk '/^(\[)/{f=0} f; /\[Script\]/{f=1}' limbo.tmp>tmp.tmp
        awk NF tmp.tmp>limbo_script.tmp
        sed -i '1i\# > Limbo' limbo_script.tmp

        awk '
        {
          if($0~/hostname = %APPEND%/) {
            gsub("hostname = %APPEND%","");
            print $0 ",";
            {exit}; 
          }      
        }
        ' limbo.tmp>tmp.tmp
        awk '{if(NR%3!=0)ORS=" ";else ORS="\n "}1' tmp.tmp > limbo_hostname.tmp
        sed -i 's/^/Limboooooo, &/g' hostname1.tmp

    - name: 生成Spotify破解规则
      run : |
        awk '/^(\[)/{f=0} f; /\[Script\]/{f=1}' spotify.tmp>tmp.tmp
        awk NF tmp.tmp>spotify_script.tmp

        awk '
        {
          if($0~/hostname = %APPEND%/) {
            gsub("hostname = %APPEND%","");
            print $0 ",";
            {exit}; 
          }      
        }
        ' spotify.tmp>tmp.tmp
        awk '{if(NR%3!=0)ORS=" ";else ORS="\n "}1' tmp.tmp > spotify_hostname.tmp

    - name: 生成Bilibili规则
      run : |
        awk '/^(\[)/{f=0} f; /\[Rule\]/{f=1}' bili.tmp>tmp.tmp
        awk NF tmp.tmp>bili_rule.tmp

        awk '/^(\[)/{f=0} f; /\[URL Rewrite\]/{f=1}' bili.tmp>tmp.tmp
        awk NF tmp.tmp>bili_url_rewrite.tmp

        awk '/^(\[)/{f=0} f; /\[Script\]/{f=1}' bili.tmp>tmp.tmp
        awk NF tmp.tmp>bili_script.tmp

        awk '
        {
          if($0~/hostname = %APPEND%/) {
            gsub("hostname = %APPEND%","");
            print $0 ",";
            {exit}; 
          }      
        }
        ' bili.tmp>bili_hostname.tmp
    - name: 生成神机规则host
      run : |
        awk '/^(\[)/{f=0} f; /\[Host\]/{f=1}' shenji.tmp>tmp.tmp
        awk '
        {
          if($0~/# >/ || $0~/=/) {
            if($0!~/hostname/) {
              print $0;
            }
          }      
        }
        ' tmp.tmp>host.tmp
        awk NF host.tmp > Surge/host.tpl

    - name: 生成神机规则General
      run : |
        awk '
        {
          if($0~/always-real-ip = %APPEND%/) {
            gsub("always-real-ip = %APPEND%","");
            print $0;
            {exit}; 
          }      
        }
        ' General.tmp>realip2.tmp
    
    - name: 生成神机规则Advertising
      run : |
        # awk '
        # {
        #   if($0~/force-http-engine-hosts = %APPEND%/) {
        #     gsub("force-http-engine-hosts = %APPEND% ","");
        #     print $0;
        #     {exit};
        #   }      
        # }
        # ' Advertising.tmp>force-http-engine-hosts2.tmp

        # awk '/^(\[)/{f=0} f; /\[Map Local\]/{f=1}' Advertising.tmp>tmp.tmp
        # awk NF tmp.tmp>map_local2.tmp
        
    - name: 合并文件_all
      if: env.VER == 'all' && !cancelled()
      run : |
        cat realip*.tmp > Surge/always_real_ip.tpl
        cat force-http-engine-hosts*.tmp > force-http-engine-hosts.tmp
        awk '{if(NR%3!=0)ORS=" ";else ORS="\n "}1' force-http-engine-hosts.tmp > Surge/force_http_engine_hosts.tpl
        cat rule*.tmp > Surge/rule.tpl
        cat limbo_url_rewrite.tmp youtube_ad_url_rewrite.tmp url_rewrite*.tmp > Surge/url_rewrite.tpl
        cat limbo_header_rewrite.tmp > Surge/header_rewrite.tpl
        cat limbo_script.tmp youtube_ad_script.tmp spotify_script.tmp script*.tmp > Surge/script.tpl
        cat youtube_ad_map_local.tmp map_local*.tmp > Surge/map_local.tpl
        cat limbo_hostname.tmp youtube_ad_hostname.tmp spotify_hostname.tmp hostname*.tmp > hostname.tmp
        awk '{if(NR%3!=0)ORS=" ";else ORS="\n "}1' hostname.tmp > Surge/hostname.tpl

    - name: 删除临时文件
      if: (!cancelled())
      run : |
        rm *.tmp
        ls
    
    - name: 判断是否有变更
      if: (!cancelled())
      id: status
      run: |
        STR1="nothing to commit, working tree clean"
        STR2="Changes not staged for commit"
        out=$(git status)
        if [[ "$(echo $out | grep "$STR1")" != "" ]]
        then
          echo "status="nochange"" >> $GITHUB_OUTPUT
        fi
        if [[ "$(echo $out | grep "$STR2")" != "" ]]
        then
          echo "status="change"" >> $GITHUB_OUTPUT
        fi
    
    - name: 合并到仓库
      if: (!cancelled())
      run : |
        if [[ "${{steps.status.outputs.status}}" == "change" ]]
        then
          git add .
          git commit -m  "Update:${{steps.date.outputs.DATE}}"
          git push origin main
        fi

    - name: 移除workflow运行
      if: (!cancelled())
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Telegram推送
      if: env.TELEGRAM_NOTIFICATION == 'true' && !cancelled()  
      run: |
        if [[ "${{steps.status.outputs.STATUS}}" == "change" ]]
        then
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${{ env.TELEGRAM_NOTIFICATION_CONTENT }}&parse_mode=HTML"
        fi
        
